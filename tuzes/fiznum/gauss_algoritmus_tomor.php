<?php function max2D(&$array) {$maxval = 0;$maxkey = 0;$maxrow = 0;foreach($array as $rowkey => &$row){ $rowabs = vabs($row); $max = max($rowabs); if ($maxval < $max) { $maxrow = $rowkey; $maxkey = array_search($max, $rowabs); $maxval = $max; } }return array($maxrow, $maxkey); } function linmegold($linm,$rows,$linv) {global $am;$am = $linm;for ($i=0; $i<$rows; $i++){ for ($k=0; $k<$rows; $k++) { if ($i==$k) $tbm[$i][$i] = 1; else $tbm[$i][$k] = 0; } } $in = $tbm;function absItem(&$item, $key){ $item = abs($item);}function vabs($array){ array_walk($array, "absItem"); return $array;}function oszlopcsere($am,$in,$rows,$o1,$o2,$tbm){ for ($i=0; $i < $rows; $i++) { $temp = $am[$i][$o1]; $temi = $in[$i][$o1]; $am[$i][$o1] = $am[$i][$o2]; $in[$i][$o1] = $in[$i][$o2]; $am[$i][$o2] = $temp; $in[$i][$o2] = $temi; $temp = $tbm[$i][$o1]; $tbm[$i][$o1] = $tbm[$i][$o2]; $tbm[$i][$o2] = $temp; } return(array($am,$tbm,$in));}function sorcsere($am,$in,$rows,$s1,$s2,$linv){ for ($i=0; $i<$rows; $i++) { $temp = $am[$s1][$i]; $temi = $in[$s1][$i]; $am[$s1][$i] = $am[$s2][$i]; $in[$s1][$i] = $in[$s2][$i]; $am[$s2][$i] = $temp; $in[$s2][$i] = $temi; } $temp = $linv[$s1]; $linv[$s1] = $linv[$s2]; $linv[$s2] = $temp; return(array($am,$linv,$in));}for ($i=0; $i< $rows; $i++){ $sormax = max(vabs($am[$i],$rows)); for ($k=0; $k< $rows; $k++) { $am[$i][$k] = $am[$i][$k] / $sormax; $in[$i][$k] = $in[$i][$k] / $sormax; } $linv[$i] = $linv[$i] / $sormax;}$jam = $am;for ($i=0; $i<$rows; $i++){ $ics = $i + 1; list($sor,$oszlop) = max2D($jam); if ($sor != 0) { list($am,$linv,$in) = sorcsere($am,$in,$rows,$i,$sor + $i,$linv); } if ($oszlop != 0) { list($am,$tbm,$in) = oszlopcsere($am,$in,$rows,$i,$oszlop+$i,$tbm); } $amii = $am[$i][$i]; $linv[$i] = $linv[$i] / $am[$i][$i]; for ($k=$rows-1; $k >= 0; $k--) { $in[$i][$k] = $in[$i][$k] / $amii; $am[$i][$k] = $am[$i][$k] / $amii; } for ($j=0; $j < $rows; $j++) { if ($j != $i) { $amji = $am[$j][$i]; $linv[$j] = $linv[$j] - $am[$j][$i] * $linv[$i]; for ($k=$rows-1; $k >= 0; $k--) { $in[$j][$k] = $in[$j][$k] - $amji * $in[$i][$k]; $am[$j][$k] = $am[$j][$k] - $amji * $am[$i][$k]; }  } } unset($jam); for ($c1=0; $c1<$rows-$ics; $c1++) { for ($c2=0; $c2<$rows-$ics; $c2++) { $jam[$c1][$c2] = $am[$c1+$ics][$c2+$ics]; } } }$linv = matrixvektor($tbm,$rows,$rows,$linv); $in = matrixmatrix(matrixmatrix($tbm,$in,$rows),transponate($tbm,$rows),$rows); return(array($linv,$in));} ?>